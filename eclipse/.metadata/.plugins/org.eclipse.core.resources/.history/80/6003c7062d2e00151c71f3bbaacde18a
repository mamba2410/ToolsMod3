package mamba2410.toolsmod3.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import mamba2410.toolsmod3.lib.MetadataItemNames;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.ItemStack;
import net.minecraftforge.common.util.EnumHelper;

public class ToolHelper {
	
	public static List<ItemStack> headlist = new ArrayList<ItemStack>();
	public static List<ItemStack> rodlist = new ArrayList<ItemStack>();
	
	public static HashMap<String, ItemStack> headItems = new HashMap<String, ItemStack>();
	public static HashMap<String, ItemStack> rodItems = new HashMap<String, ItemStack>();
	
	private static List<Integer> harvestlevellist = new ArrayList<Integer>();
	private static List<Integer> basedurabilitylist = new ArrayList<Integer>();
	private static List<Float> efficiencylist = new ArrayList<Float>();
	private static List<Float> damagelist = new ArrayList<Float>();
	private static List<Integer> enchantabilitylist = new ArrayList<Integer>();
	private static List<Float> durmodlist = new ArrayList<Float>();
	
	private static HashMap<String, Integer> harvestlevels = new HashMap<String, Integer>();
	private static HashMap<String, Integer> basedurability = new HashMap<String, Integer>();
	private static HashMap<String, Float> efficiency = new HashMap<String, Float>();
	private static HashMap<String, Float> damage = new HashMap<String, Float>();
	private static HashMap<String, Integer> enchantability = new HashMap<String, Integer>();
	private static HashMap<String, Float> durmod = new HashMap<String, Float>();
	
	private static HashMap<String, ToolMaterial> custommats = new HashMap<String, ToolMaterial>();
	
	private static void addToolMats(){
		addRawMat(3, 1600, 10.0f, 3.0f, 18);
		addRawMat(3, 2100, 8.0f, 2.0f, 8);
		addRawMat(2, 1400, 16.0f, 2.0f, 25);
		addRawMat(3, 2600, 16.0f, 2.0f, 25);
		
		addRawRodModifier(1.0f);
		addRawRodModifier(1.1f);
		addRawRodModifier(1.05f);
	}
	
	private static void addMats(){
		addHeadItem(new ItemStack(Items.emerald, 1, 0));
		addHeadItem(new ItemStack(Blocks.obsidian, 1, 0));
		addHeadItem(new ItemStack(Items.dye, 1, 4));
		addHeadItem(new ItemStack(Items.quartz, 1, 0));
		
		addRodItem(new ItemStack(Items.stick, 1, 0));
		addRodItem(new ItemStack(Items.blaze_rod, 1, 0));
		addRodItem(new ItemStack(Items.bone, 1, 0));
	}
	
	public static String getRodNameFromToolMat(ToolMaterial mat){
		String name = mat.name();
		char[] namea = name.toCharArray();
		for(int i = 0; i < namea.length; i++){
			if(namea[i] == '_'){
				return name.substring(i+1, namea.length);
			}
		}
		
		return "default";
	}
	
	public static String getHeadNameFromToolMat(ToolMaterial mat){
		String name = mat.name();
		char[] namea = name.toCharArray();
		for(int i = 0; i < namea.length; i++){
			if(namea[i] == '_'){
				return name.substring(0, i);
			}
		}
		
		return "default";
	}
	
	public static int getMetadataFromHeadStack(ItemStack stack){
		ItemStack[] stacks = new ItemStack[headlist.toArray().length];
		for(int i = 0; i < headlist.toArray().length; i++){
			stacks[i] = headlist.get(i);
		}
		for(int i = 0; i < stacks.length; i++){
			if(stack.equals(stacks[i])){
				return i;
			}
		}
		return 0;
	}
	
	public static int getMetadataFromRodStack(ItemStack stack){
		ItemStack[] stacks = new ItemStack[rodlist.toArray().length];
		for(int i = 0; i < rodlist.toArray().length; i++){
			stacks[i] = rodlist.get(i);
		}
		for(int i = 0; i < stacks.length; i++){
			if(stack.equals(stacks[i])){
				return i;
			}
		}
		return 0;
	}
	
	public static Object[] getPickRecipe(ItemStack mat){
		return new Object[] {"mmm", " t ", " t ", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	public static Object[] getAxeRecipe(ItemStack mat){
		return new Object[] {"mm", "mt", " t", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	public static Object[] getSpadeRecipe(ItemStack mat){
		return new Object[] {"m", "t", "t", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	public static Object[] getSwordRecipe(ItemStack mat){
		return new Object[] {"m", "m", "t", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	public static Object[] getHoeRecipe(ItemStack mat){
		return new Object[] {"mm", " t", " t", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	public static Object[] getRodRecipe(ItemStack mat){
		return new Object[] {"m", "t", "m", 'm', mat, 't', ItemHandler.instance.getToolPartItem()};
	}
	
	public static ToolMaterial getAppropriateMatetial(ItemStack head, ItemStack rod){
		String smat = getMaterialName(head, rod);
		ToolMaterial mat = EnumHelper.addToolMaterial(smat,
				harvestlevels.get(getHeadName(head)),
				(int)(basedurability.get(getHeadName(head)) * durmod.get(getRodName(rod))),
				efficiency.get(getHeadName(head)),
				damage.get(getHeadName(head)),
				enchantability.get(getHeadName(head)));
		custommats.put(smat, mat);
		return mat;
	}
	
	public static void initializeMaps(){
		addMats();
		addToolMats();
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			ItemStack[] items = new ItemStack[headlist.toArray().length] ;
			for(int j = 0; j < headlist.toArray().length; j++){
				items[j] = headlist.get(j);
			}
			ItemStack item = items[i];
			if(item != null){
				headItems.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.RodNames.length; i++){
			ItemStack[] items = new ItemStack[rodlist.toArray().length] ;
			for(int j = 0; j < rodlist.toArray().length; j++){
				items[j] = rodlist.get(j);
			}
			ItemStack item = items[i];
			if(item != null){
				rodItems.put(MetadataItemNames.RodNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			Integer[] items = new Integer[harvestlevellist.toArray().length] ;
			for(int j = 0; j < harvestlevellist.toArray().length; j++){
				items[j] = harvestlevellist.get(j);
			}
			int item = items[i];
			if(item >= 0){
				harvestlevels.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			Integer[] items = new Integer[basedurabilitylist.toArray().length] ;
			for(int j = 0; j < basedurabilitylist.toArray().length; j++){
				items[j] = basedurabilitylist.get(j);
			}
			int item = items[i];
			if(item >= 0){
				basedurability.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			Float[] items = new Float[efficiencylist.toArray().length] ;
			for(int j = 0; j < efficiencylist.toArray().length; j++){
				items[j] = efficiencylist.get(j);
			}
			float item = items[i];
			if(item >= 0){
				efficiency.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			Float[] items = new Float[damagelist.toArray().length] ;
			for(int j = 0; j < damagelist.toArray().length; j++){
				items[j] = damagelist.get(j);
			}
			float item = items[i];
			if(item >= 0){
				damage.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			Integer[] items = new Integer[enchantabilitylist.toArray().length] ;
			for(int j = 0; j < enchantabilitylist.toArray().length; j++){
				items[j] = enchantabilitylist.get(j);
			}
			int item = items[i];
			if(item >= 0){
				enchantability.put(MetadataItemNames.HeadNames[i], item);
			}
		}
		
		for(int i = 0; i < MetadataItemNames.RodNames.length; i++){
			Float[] items = new Float[durmodlist.toArray().length] ;
			for(int j = 0; j < durmodlist.toArray().length; j++){
				items[j] = durmodlist.get(j);
			}
			float item = items[i];
			if(item >= 0){
				durmod.put(MetadataItemNames.RodNames[i], item);
			}
		}
	}

	public static String getHeadName(ItemStack ihead){
		String head = "";
		
		String[] heads = new String[headItems.keySet().toArray().length];
		for(int i = 0; i < heads.length; i++){
			heads[i] = (String) headItems.keySet().toArray()[i];
		}
		
		for(int i = 0; i < MetadataItemNames.HeadNames.length; i++){
			if(headItems.get(heads[i]) != null){
				if(ihead.equals(headItems.get(heads[i]))){
					head = heads[i];
				}
			}
		}
		return head;
	}
	
	public static String getRodName(ItemStack irod){
		String rod = "";
		
		String[] rods = new String[rodItems.keySet().toArray().length];
		for(int i = 0; i < rods.length; i++){
			rods[i] = (String) rodItems.keySet().toArray()[i];
		}
		
		for(int i = 0; i < MetadataItemNames.RodNames.length; i++){
			if(rodItems.get(rods[i]) != null){
				if(irod.equals(rodItems.get(rods[i]))){
					rod = rods[i];
				}
			}
		}
		return rod;
	}
	
	private static String getMaterialName(ItemStack ihead, ItemStack irod){
		
		String head = getHeadName(ihead);
		String rod = getRodName(irod);
		
		if(head.length() > 0 && rod.length() > 0)
			return head + "_" + rod;
		else
			return "default";
		
	}
	
	public static void addRawMat(int hl, int bd, float ef, float dg, int ec){
		harvestlevellist.add(hl);
		basedurabilitylist.add(bd);
		efficiencylist.add(ef);
		damagelist.add(dg);
		enchantabilitylist.add(ec);
	}
	
	public static void addRawRodModifier(float dm){
		durmodlist.add(dm);
	}
	
	public static void addHeadItem(ItemStack stack){
		headlist.add(stack);
	}
	
	public static void addRodItem(ItemStack stack){
		rodlist.add(stack);
	}

}
